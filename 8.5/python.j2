from airflow import DAG
from airflow.operators.python import PythonOperator
from datetime import datetime, timedelta
import os
import sys
import importlib.util

# ========== ДИНАМИЧЕСКИЙ ИМПОРТ ФУНКЦИЙ ==========
# Абсолютный путь к скрипту с функциями
SCRIPT_PATH = "/opt/airflow/generator/script/python_functions.py"

if os.path.exists(SCRIPT_PATH):
    try:
        # Динамически загружаем модуль
        spec = importlib.util.spec_from_file_location("python_functions", SCRIPT_PATH)
        python_functions = importlib.util.module_from_spec(spec)
        spec.loader.exec_module(python_functions)

        # Импортируем нужные функции
        call_api = python_functions.call_api
        validate_json_data = python_functions.validate_json_data
        print("✅ Imported functions from generator/script")

    except Exception as e:
        print(f"❌ Error importing functions: {str(e)}")
        # Fallback to mock functions
        def call_api(**kwargs):
            print("📡 Mock API call")
            return {"status": "mock_success"}
        def validate_json_data(**kwargs):
            print("🔍 Mock validation")
            return {"valid": True}
else:
    print("❌ Script not found: /opt/airflow/generator/script/python_functions.py")
    # Mock functions
    def call_api(**kwargs):
        print("📡 Mock API call (script not found)")
        return {"status": "mock_success"}
    def validate_json_data(**kwargs):
        print("🔍 Mock validation (script not found)")
        return {"valid": True}
# ========== КОНЕЦ ИМПОРТА ==========

def replace_templates(value, context):
    """Замена template переменных"""
    if isinstance(value, str):
        return value.replace("{{ ds }}", context['ds'])
    return value

{% for task in tasks %}
{% if task.task_type == "API_CALL" %}
def {{ task.task_id }}_wrapper(**kwargs):
    """Wrapper for API call"""
    params = {}
    {% for key, value in task.items() %}
    {% if key not in ['task_id', 'task_type'] %}
    params['{{ key }}'] = replace_templates({{ value | tojson }}, kwargs)
    {% endif %}
    {% endfor %}
    return call_api(**params)
{% endif %}

{% if task.task_type == "VALIDATION" %}
def {{ task.task_id }}_wrapper(**kwargs):
    """Wrapper for validation"""
    params = {}
    {% for key, value in task.items() %}
    {% if key not in ['task_id', 'task_type'] %}
    params['{{ key }}'] = replace_templates({{ value | tojson }}, kwargs)
    {% endif %}
    {% endfor %}
    return validate_json_data(**params)
{% endif %}
{% endfor %}

with DAG(
    dag_id="{{ dag_id }}",
    description="{{ description }}",
    start_date=datetime({{ start_date.year }}, {{ start_date.month }}, {{ start_date.day }}),
    schedule_interval="{{ schedule_interval }}",
    catchup={{ catchup }},
    max_active_runs={{ max_active_runs }},
    tags={{ tags }},
    default_args={
        "retries": {{ retries }},
        "retry_delay": timedelta(seconds={{ retry_delay }})
    }
) as dag:

    {% for task in tasks %}
    {{ task.task_id }} = PythonOperator(
        task_id="{{ task.task_id }}",
        python_callable={{ task.task_id }}_wrapper,
        provide_context=True
    )
    {% endfor %}

    # Установка зависимостей
    {% for i in range(1, tasks|length) %}
    {{ tasks[i-1].task_id }} >> {{ tasks[i].task_id }}
    {% endfor %}